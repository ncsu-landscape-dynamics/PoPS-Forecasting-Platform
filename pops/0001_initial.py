# Generated by Django 3.1.4 on 2021-01-07 19:05

from django.conf import settings
import django.contrib.gis.db.models.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import pops.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CaseStudy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, help_text='Give your case study a descriptive name.', max_length=150, verbose_name='case study name')),
                ('description', models.TextField(blank=True, help_text='Give your case study a description.', max_length=300, null=True, verbose_name='case study description')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='date created')),
                ('number_of_pests', models.PositiveSmallIntegerField(blank=True, default=1, help_text='How many pests are in your model system?', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)], verbose_name='number of pests')),
                ('number_of_hosts', models.PositiveSmallIntegerField(blank=True, default=1, help_text='How many hosts are in your model system?', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)], verbose_name='number of hosts')),
                ('time_step_unit', models.CharField(choices=[('month', 'Month'), ('week', 'Week'), ('day', 'Day')], default='Month', help_text='Select a time step unit for your simulation:', max_length=50, verbose_name='time step')),
                ('time_step_n', models.PositiveSmallIntegerField(blank=True, default=1, help_text="How many units is the desired time step? For example, if the time step unit is 'Day', select 3 here to make the time step 3 days.", validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(365)], verbose_name='time step n')),
                ('first_calibration_date', models.DateField(help_text='What is the first calibration date?', verbose_name='first calibration date')),
                ('last_calibration_date', models.DateField(help_text='What is the last calibration date?', verbose_name='last calibration date')),
                ('first_forecast_date', models.DateField(help_text='What is the first forecast date?', verbose_name='first forecast date')),
                ('last_forecast_date', models.DateField(help_text='What is the last forecast date?', verbose_name='last forecast date')),
                ('staff_approved', models.BooleanField(default=False, help_text='Sample help text.', verbose_name='approved by staff')),
                ('calibration_status', models.CharField(blank=True, choices=[('NO START', 'Not started'), ('IN PROGRESS', 'In progress'), ('FAILED', 'Failed'), ('SUCCESS', 'Successful'), ('EXTERNAL', 'Non-self')], default='NO START', help_text='What type of model do you want to use?', max_length=20, verbose_name='calibration status')),
                ('use_external_calibration', models.BooleanField(default=False, help_text="Is another case study's calibrated parameters used here?", verbose_name="use another case study's calibration")),
                ('output_frequency_unit', models.CharField(choices=[('month', 'Month'), ('week', 'Week'), ('day', 'Day')], default='Month', help_text='Select a output frequency unit for your simulation', max_length=50, verbose_name='output frequency')),
                ('output_frequency_n', models.PositiveSmallIntegerField(blank=True, default=1, help_text="How many units is the desired output frequency? For example, if the output frequency unit is 'Day', select 3 here to make the output frequency 3 days.", validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(365)], verbose_name='output frequency n')),
                ('use_movements', models.BooleanField(default=False, help_text='Use host movement data?', verbose_name='use host movement')),
                ('start_exposed', models.BooleanField(default=False, help_text='Start the simulation with exposed hosts?', verbose_name='start the simulation with exposed hosts')),
                ('use_spread_rate', models.BooleanField(default=False, help_text='Use spread rate?', verbose_name='use spread rate')),
                ('r_data', models.FileField(blank=True, help_text='R data file to run PoPS model', upload_to=pops.models.r_data_directory, verbose_name='R data file')),
                ('calibration', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='pops.casestudy', verbose_name='calibrated case study')),
                ('created_by', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='created by')),
            ],
            options={
                'verbose_name': 'case study',
                'verbose_name_plural': 'case studies',
            },
        ),
        migrations.CreateModel(
            name='HostInformation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, help_text="What is the host's common name?", max_length=150, verbose_name='host common name')),
            ],
            options={
                'verbose_name': 'host',
                'verbose_name_plural': 'hosts',
            },
        ),
        migrations.CreateModel(
            name='Output',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='date created')),
                ('number_infected', models.IntegerField(default=0, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='number_infected')),
                ('infected_area', models.DecimalField(blank=True, decimal_places=2, default=1, help_text='Overall infected area from the run.', max_digits=16, validators=[django.core.validators.MinValueValidator(0)], verbose_name='infected_area (m^2)')),
                ('year', models.PositiveIntegerField(default=2020, null=True, validators=[django.core.validators.MinValueValidator(2018)], verbose_name='year')),
                ('min_spread_map', models.JSONField(null=True)),
                ('max_spread_map', models.JSONField(null=True)),
                ('median_spread_map', models.JSONField(null=True)),
                ('probability_map', models.JSONField(null=True)),
                ('susceptible_map', models.JSONField(null=True)),
                ('escape_probability', models.DecimalField(blank=True, decimal_places=2, default=1, help_text='Probability that the pest/pathogen escapes quarantine or other boundary', max_digits=6, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)], verbose_name='probability of escape')),
            ],
            options={
                'verbose_name': 'output',
                'verbose_name_plural': 'outputs',
            },
        ),
        migrations.CreateModel(
            name='Pest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('use_treatment', models.BooleanField(default=False, help_text='Has management occurred during the time of initial infection/infestation?', verbose_name='prior treatments')),
                ('vector_born', models.BooleanField(default=False, help_text='Is the disease spread by a vector (e.g. an insect)?', verbose_name='vector born')),
                ('model_type', models.CharField(blank=True, choices=[('SI', 'Susceptible Infected'), ('SID', 'Susceptible Infected Diseased'), ('SEID', 'Susceptible Exposed Infected Diseased')], default='SI', help_text='What type of model do you want to use?', max_length=20, verbose_name='model type')),
                ('natural_dispersal_type', models.CharField(blank=True, choices=[('CAUCHY', 'Cauchy'), ('DOUBLE SCALE CAUCHY', 'Double Scale Cauchy'), ('EXPONENTIAL', 'Exponential'), ('DOUBLE SCALE EXPONENTIAL', 'Double Scale Exponential')], default='CAUCHY', max_length=70, verbose_name='natural dispersal type')),
                ('anthropogenic_dispersal_type', models.CharField(blank=True, choices=[('CAUCHY', 'Cauchy'), ('DOUBLE SCALE CAUCHY', 'Double Scale Cauchy'), ('EXPONENTIAL', 'Exponential'), ('DOUBLE SCALE EXPONENTIAL', 'Double Scale Exponential')], default='CAUCHY', max_length=70, verbose_name='anthropogenic dispersal type')),
                ('use_quarantine', models.BooleanField(default=False, help_text='Does the pest have available quarantine zone(s)?', verbose_name='use quarantine')),
                ('case_study', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pops.casestudy', verbose_name='case study')),
            ],
            options={
                'verbose_name': 'pest',
                'verbose_name_plural': 'pests',
            },
        ),
        migrations.CreateModel(
            name='PestHostInteraction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('competency', models.DecimalField(blank=True, decimal_places=2, default=1, help_text='Competency is a value between 0 and 1. 0 spreads no pest; 1 spreads maximum amount of pest. This is for generalist pests with differing host preferences and pathogens with differing host competencies.', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='competency')),
                ('susceptibility', models.DecimalField(blank=True, decimal_places=2, default=1, help_text='Susceptibility is a value between 0 and 1. 0 indicates the host can not be infected/infested; 1 indicates the host is maximally susceptibile.This is for generalist pests with differing host preferences and pathogens with differing host competencies.', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='susceptibility')),
                ('mortality_on', models.BooleanField(blank=True, help_text='Does the host experience mortality with this pest?', verbose_name='mortality')),
                ('host', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pops.hostinformation', verbose_name='host')),
                ('pest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pops.pest', verbose_name='pest')),
            ],
            options={
                'verbose_name': 'pest host interaction',
                'verbose_name_plural': 'pest host interaction',
            },
        ),
        migrations.CreateModel(
            name='PestInformation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('common_name', models.CharField(max_length=150, verbose_name='pest common name')),
                ('scientific_name', models.CharField(help_text='Sample help text.', max_length=150, verbose_name='pest scientific name')),
                ('about', models.TextField(help_text='Sample help text.', verbose_name='about the pest')),
                ('risks', models.TextField(help_text='Sample help text.', verbose_name='risks associated with the pest')),
                ('management_activity', models.TextField(help_text='Sample help text.', verbose_name='management activities to control the pest')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='date created')),
                ('date_updated', models.DateTimeField(auto_now=True, verbose_name='date updated')),
                ('staff_approved', models.BooleanField(default=False, help_text='Sample help text.', verbose_name='approved by staff')),
                ('invasive', models.BooleanField(default=True, help_text='Is the organism invasive in the US?', verbose_name='invasive')),
                ('host_type', models.CharField(choices=[('ANIMAL', 'Animal'), ('PLANT', 'Plant')], default='PLANT', help_text='Choose what system type this pest/pathogen infects.', max_length=30, verbose_name='host type')),
                ('organism_type', models.CharField(choices=[('PEST', 'Pest (e.g. insect)'), ('PATHOGEN', 'Pathogen (e.g. disease)')], default='PEST', help_text='Choose whether this is a pest or pathogen.', max_length=30, verbose_name='organism type')),
                ('arrival_year', models.PositiveSmallIntegerField(blank=True, default=None, help_text='The first year that it was identified in the US.', null=True, validators=[django.core.validators.MinValueValidator(1700), django.core.validators.MaxValueValidator(2100)], verbose_name='first year found in US')),
                ('arrival_location', models.CharField(blank=True, default=None, max_length=150, null=True, verbose_name='first location found in US (State)')),
                ('thumbnail', models.FileField(blank=True, help_text='Upload thumbnail image of pest/pathogen (58x58 px crop to 0.8in square at 72ppi)', null=True, upload_to='pest_images', verbose_name='Small thumbnail image of pest/pathogen')),
                ('large_image', models.FileField(blank=True, help_text='Upload image of pest/pathogen (crop to 2in square at 72ppi)', null=True, upload_to='pest_images', verbose_name='Large image of pest/pathogen')),
                ('spread_image', models.FileField(blank=True, help_text='Upload image or gif of pest/pathogen (at 72ppi)', null=True, upload_to='pest_images', verbose_name='Image or GIF of forecast')),
            ],
            options={
                'verbose_name': 'pest information',
                'verbose_name_plural': 'pest informations',
            },
        ),
        migrations.CreateModel(
            name='Run',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='date created')),
                ('status', models.CharField(blank=True, choices=[('PENDING', 'Pending'), ('IN PROGRESS', 'In progress'), ('READING DATA', 'Reading data'), ('WAITING FOR TL', 'Waiting for Tangible Landscape'), ('RUNNING MODEL', 'Running model'), ('WRITING DATA', 'Writing data'), ('FAILED', 'Failed'), ('SUCCESS', 'Successful')], default='PENDING', max_length=20, verbose_name='run status')),
                ('management_polygons', models.JSONField(blank=True, null=True)),
                ('management_cost', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=16, null=True, verbose_name='management cost')),
                ('management_area', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=16, null=True, verbose_name='management area')),
                ('logging', models.TextField(blank=True, help_text='For checking error logs for backend model runs', max_length=300, null=True, verbose_name='error logs for backend')),
                ('time_taken', models.DecimalField(blank=True, decimal_places=1, max_digits=5, null=True, verbose_name='time taken')),
                ('steering_year', models.PositiveIntegerField(blank=True, default=None, null=True, validators=[django.core.validators.MinValueValidator(2018)], verbose_name='steering year')),
            ],
            options={
                'verbose_name': 'run',
                'verbose_name_plural': 'runs',
            },
        ),
        migrations.CreateModel(
            name='AllPopulationsData',
            fields=[
                ('case_study', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='pops.casestudy', verbose_name='case study')),
                ('user_file', models.FileField(blank=True, help_text='Upload your total population data as a raster file. This could be all the plants in a cell, or alternatively, all  cells could have the value of the maximum number of hosts found in any cell in your study area.', upload_to=pops.models.all_populations_directory, verbose_name='all plant data')),
            ],
            options={
                'verbose_name': 'all population',
                'verbose_name_plural': 'all population',
            },
        ),
        migrations.CreateModel(
            name='AnthropogenicDirection',
            fields=[
                ('pest', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='pops.pest', verbose_name='pest')),
                ('direction', models.CharField(choices=[('N', 'North'), ('NE', 'Northeast'), ('E', 'East'), ('SE', 'Southeast'), ('S', 'South'), ('SW', 'Southwest'), ('W', 'West'), ('NW', 'Northwest')], default='N', help_text='What is the predominate anthropogenic direction?', max_length=30, verbose_name='anthropogenic direction')),
                ('kappa', models.PositiveSmallIntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (6, '6'), (7, '7'), (8, '8'), (9, '9'), (10, '10'), (11, '11'), (12, '12')], default=1, help_text='What is the average anthropogenic strength in your study area? 0 is no effect and 12 is strong directional movement', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)], verbose_name='anthropogenic direction strenth (kappa)')),
            ],
            options={
                'verbose_name': 'anthropogenic direction',
                'verbose_name_plural': 'anthropogenic directions',
            },
        ),
        migrations.CreateModel(
            name='DistanceToBoundary',
            fields=[
                ('output', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='pops.output', verbose_name='output')),
                ('west_distance', models.DecimalField(blank=True, decimal_places=2, help_text='distance to boundary in westerly direction', max_digits=16, null=True, verbose_name='westerly distance to boundary')),
                ('east_distance', models.DecimalField(blank=True, decimal_places=2, help_text='distance to boundary in easterly direction', max_digits=16, null=True, verbose_name='easterly distance to boundary')),
                ('north_distance', models.DecimalField(blank=True, decimal_places=2, help_text='distance to boundary in northerly direction', max_digits=16, null=True, verbose_name='northerly distance to boundary')),
                ('south_distance', models.DecimalField(blank=True, decimal_places=2, help_text='distance to boundary in southerly direction', max_digits=16, null=True, verbose_name='southerly distance to boundary')),
            ],
            options={
                'verbose_name': 'distance to boundary',
                'verbose_name_plural': 'distance to boundarys',
            },
        ),
        migrations.CreateModel(
            name='Infestation',
            fields=[
                ('pest', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='pops.pest', verbose_name='pest')),
                ('user_file', models.FileField(blank=True, help_text='Infestation raster generated from Location', upload_to=pops.models.infestation_directory, verbose_name='infestation data')),
            ],
            options={
                'verbose_name': 'infestation_data',
                'verbose_name_plural': 'infestation_datas',
            },
        ),
        migrations.CreateModel(
            name='LatencyPeriod',
            fields=[
                ('pest', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='pops.pest', verbose_name='pest')),
                ('minimum', models.PositiveSmallIntegerField(blank=True, default=0, help_text='Minimum latency period (in days)', null=True, verbose_name='minimum days')),
                ('maximum', models.PositiveSmallIntegerField(blank=True, default=0, help_text='Maximum latency period (in days)', null=True, verbose_name='minimum days')),
            ],
            options={
                'verbose_name': 'latency period',
                'verbose_name_plural': 'latency period',
            },
        ),
        migrations.CreateModel(
            name='MapBoxParameters',
            fields=[
                ('case_study', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='pops.casestudy', verbose_name='case study')),
                ('longitude', models.DecimalField(blank=True, decimal_places=14, default=-75.89533170441632, help_text='Longitude of the center of the case study', max_digits=17, validators=[django.core.validators.MinValueValidator(-180), django.core.validators.MaxValueValidator(180)], verbose_name='longitude')),
                ('latitude', models.DecimalField(blank=True, decimal_places=14, default=40.2039152196177, help_text='Latitude of the center of the case study', max_digits=17, validators=[django.core.validators.MinValueValidator(-90), django.core.validators.MaxValueValidator(90)], verbose_name='latitude')),
                ('zoom', models.PositiveSmallIntegerField(blank=True, default=7, help_text='The zoom level of MapBox', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(16)], verbose_name='mapbox zoom level')),
            ],
            options={
                'verbose_name': 'map box parameter',
                'verbose_name_plural': 'map box parameters',
            },
        ),
        migrations.CreateModel(
            name='Mortality',
            fields=[
                ('host', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='pops.pesthostinteraction', verbose_name='PestHostInteraction')),
                ('method', models.CharField(choices=[('DATA_FILE', 'PoPS estimates mortality parameters from user data'), ('USER', 'User provides mortality rate and time lag')], default='DATA_FILE', help_text='Choose a method to determine mortality rate and time lag', max_length=30, verbose_name='mortality rate method')),
                ('user_file', models.FileField(blank=True, help_text='A single raster file with number of trees that experienced mortality as a result of the pest/pathogen that year (each layer is a year)', null=True, upload_to=pops.models.mortality_directory, verbose_name='mortality data')),
                ('rate', models.DecimalField(blank=True, decimal_places=2, default=0, help_text='Annual percentage of hosts experiencing mortality?', max_digits=3, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='mortality rate (fraction)')),
                ('time_lag', models.PositiveSmallIntegerField(blank=True, default=2, help_text='Years before mortality occurs on average?', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)], verbose_name='mortality time lag (years)')),
            ],
            options={
                'verbose_name': 'mortality',
                'verbose_name_plural': 'mortalities',
            },
        ),
        migrations.CreateModel(
            name='Parameters',
            fields=[
                ('pest', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='pops.pest', verbose_name='pest')),
                ('means', models.JSONField(blank=True, help_text='Parameter means...', verbose_name='vector of means')),
                ('covariance_matrix', models.JSONField(blank=True, help_text='Covariance matrix for parameters', verbose_name='covariance matrix')),
            ],
            options={
                'verbose_name': 'parameters',
                'verbose_name_plural': 'parameters',
            },
        ),
        migrations.CreateModel(
            name='PriorTreatment',
            fields=[
                ('pest', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='pops.pest', verbose_name='pest')),
                ('user_file', models.FileField(blank=True, help_text='Upload the single raster file for management actions.', null=True, upload_to=pops.models.treatment_directory, verbose_name='prior treatments data')),
                ('date', models.DateField(blank=True, help_text='Date of treatment', null=True, verbose_name='date of treatment')),
            ],
            options={
                'verbose_name': 'prior_treatment',
                'verbose_name_plural': 'prior_treatments',
            },
        ),
        migrations.CreateModel(
            name='Quarantine',
            fields=[
                ('pest_information', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='pops.pestinformation', verbose_name='pest')),
                ('name', models.CharField(help_text='What is the name of the quarantine area?', max_length=150, verbose_name='quarantine name')),
                ('date', models.DateField(help_text='What is the date for the quarantine?', verbose_name='date')),
                ('polygon', django.contrib.gis.db.models.fields.PolygonField(help_text='Include the polygon for the quarantine area', srid=4326, verbose_name='quarantine polygon')),
            ],
            options={
                'verbose_name': 'quarantine',
                'verbose_name_plural': 'quarantines',
            },
        ),
        migrations.CreateModel(
            name='SpreadRate',
            fields=[
                ('output', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='pops.output', verbose_name='output')),
                ('west_rate', models.DecimalField(blank=True, decimal_places=2, help_text='Spread rate in westerly direction', max_digits=16, null=True, verbose_name='westerly spread rate')),
                ('east_rate', models.DecimalField(blank=True, decimal_places=2, help_text='Spread rate in easterly direction', max_digits=16, null=True, verbose_name='easterly spread rate')),
                ('north_rate', models.DecimalField(blank=True, decimal_places=2, help_text='Spread rate in northerly direction', max_digits=16, null=True, verbose_name='northerly spread rate')),
                ('south_rate', models.DecimalField(blank=True, decimal_places=2, help_text='Spread rate in southerly direction', max_digits=16, null=True, verbose_name='southerly spread rate')),
            ],
            options={
                'verbose_name': 'spread rate',
                'verbose_name_plural': 'spread rates',
            },
        ),
        migrations.CreateModel(
            name='TimeToBoundary',
            fields=[
                ('output', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='pops.output', verbose_name='output')),
                ('west_time', models.DecimalField(blank=True, decimal_places=2, help_text='time to boundary in westerly direction', max_digits=16, null=True, verbose_name='westerly time to boundary')),
                ('east_time', models.DecimalField(blank=True, decimal_places=2, help_text='time to boundary in easterly direction', max_digits=16, null=True, verbose_name='easterly time to boundary')),
                ('north_time', models.DecimalField(blank=True, decimal_places=2, help_text='time to boundary in northerly direction', max_digits=16, null=True, verbose_name='northerly time to boundary')),
                ('south_time', models.DecimalField(blank=True, decimal_places=2, help_text='time to boundary in southerly direction', max_digits=16, null=True, verbose_name='southerly time to boundary')),
            ],
            options={
                'verbose_name': 'time to boundary',
                'verbose_name_plural': 'time to boundarys',
            },
        ),
        migrations.CreateModel(
            name='Weather',
            fields=[
                ('pest', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='pops.pest', verbose_name='case study')),
                ('wind_on', models.BooleanField(default=False, help_text='Does wind strongly affect spread and do you have a predominate wind direction and strength?', verbose_name='wind')),
                ('seasonality_on', models.BooleanField(default=False, help_text='Does your pest/pathogen not spread during part of the year?', verbose_name='seasonality')),
                ('lethal_temp_on', models.BooleanField(default=False, help_text='Does your pest/pathogen experience mortality due to extreme temperature conditions?', verbose_name='lethal temperature')),
                ('temp_on', models.BooleanField(default=False, help_text='Does temperature affect the reproduction and survival of your pest/pathogen?', verbose_name='temperature')),
                ('precipitation_on', models.BooleanField(default=False, help_text='Does precipitation affect the reproduction and survival of your pest/pathogen?', verbose_name='precipitation')),
            ],
            options={
                'verbose_name': 'weather',
                'verbose_name_plural': 'weathers',
            },
        ),
        migrations.CreateModel(
            name='VectorPestInformation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('disease', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vectorborn_disease', to='pops.pest', verbose_name='vectorborn_disease')),
                ('vector', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vector', to='pops.pest', verbose_name='vector')),
            ],
            options={
                'verbose_name': 'vector pest information',
                'verbose_name_plural': 'vector pest information',
            },
        ),
        migrations.CreateModel(
            name='VectorHostTransmissionRate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.DecimalField(blank=True, decimal_places=0, max_digits=5, verbose_name='vector to host transmission rate value')),
                ('probability', models.DecimalField(blank=True, decimal_places=2, max_digits=5, verbose_name='vector to host transmission rate probability')),
                ('vector', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pops.vectorpestinformation', verbose_name='vector')),
            ],
            options={
                'verbose_name': 'vector to host transmission rate',
                'verbose_name_plural': 'vector to host transmission rates',
            },
        ),
        migrations.CreateModel(
            name='Session',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='date created')),
                ('name', models.CharField(help_text='Give your session a descriptive name.', max_length=150, verbose_name='session name')),
                ('description', models.TextField(blank=True, help_text='Give your session a description.', max_length=300, null=True, verbose_name='session description')),
                ('reproductive_rate', models.DecimalField(blank=True, decimal_places=2, default=0, help_text='Reproductive rate of pest/pathogen', max_digits=6, null=True, verbose_name='reproductive rate')),
                ('distance_scale', models.DecimalField(decimal_places=1, max_digits=5, verbose_name='distance scale')),
                ('final_date', models.DateField(help_text='What is the last date to run simulations?', verbose_name='final date')),
                ('weather', models.CharField(blank=True, choices=[('BAD', 'Poor spread conditions'), ('AVERAGE', 'Average spread conditions'), ('GOOD', 'Optimal spread conditions')], default='AVERAGE', max_length=20, verbose_name='weather')),
                ('max_value', models.PositiveSmallIntegerField(blank=True, default=0, help_text='Maximum number of infected in a cell for final year', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='maximum value within a cell in default run')),
                ('public', models.BooleanField(default=False, help_text='Public session? Any user can view and edit.', verbose_name='public session')),
                ('case_study', models.ForeignKey(help_text='Select a case study for this session.', on_delete=django.db.models.deletion.CASCADE, to='pops.casestudy', verbose_name='case study')),
                ('created_by', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='created by')),
                ('default_run', models.OneToOneField(blank=True, help_text='Default no management run for this session.', null=True, on_delete=django.db.models.deletion.CASCADE, to='pops.run', verbose_name='default run')),
            ],
            options={
                'verbose_name': 'session',
                'verbose_name_plural': 'sessions',
            },
        ),
        migrations.CreateModel(
            name='RunCollection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='Default_name', max_length=45, verbose_name='run name')),
                ('description', models.TextField(blank=True, default='Give your run a description.', help_text='Give your run a description.', max_length=300, null=True, verbose_name='run description')),
                ('random_seed', models.PositiveIntegerField(default=33, null=True, validators=[django.core.validators.MinValueValidator(1)], verbose_name='random seed')),
                ('tangible_landscape', models.BooleanField(default=False, help_text='Use tangible landscape for management?', verbose_name='tangible landscape')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='date created')),
                ('status', models.CharField(blank=True, choices=[('PENDING', 'Pending'), ('IN PROGRESS', 'In progress'), ('READING DATA', 'Reading data'), ('WAITING FOR TL', 'Waiting for Tangible Landscape'), ('RUNNING MODEL', 'Running model'), ('WRITING DATA', 'Writing data'), ('FAILED', 'Failed'), ('SUCCESS', 'Successful')], default='PENDING', max_length=20, verbose_name='run status')),
                ('budget', models.PositiveIntegerField(default=30000000, null=True, validators=[django.core.validators.MinValueValidator(1)], verbose_name='budget')),
                ('default', models.BooleanField(default=False, help_text='Is this the default run collection for this session?', verbose_name='default run collection')),
                ('generate_stochasticity', models.BooleanField(default=True, help_text='Does reproduction use stochastic processes?', verbose_name='generate stochasticity')),
                ('establishment_stochasticity', models.BooleanField(default=True, help_text='Does establishment use stochastic processes?', verbose_name='establishment stochasticity')),
                ('movement_stochasticity', models.BooleanField(default=True, help_text='Does host movement use stochastic processes?', verbose_name='movement stochasticity')),
                ('deterministic_dispersal', models.BooleanField(default=False, help_text='Is dispersal deterministic?', verbose_name='deterministic dispersal')),
                ('establishment_probability', models.DecimalField(blank=True, decimal_places=2, default=0.5, help_text='Probability establishment (range: 0-1, default: 0.5)', max_digits=3, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='establishment probability (fraction)')),
                ('dispersal_percent', models.DecimalField(blank=True, decimal_places=2, default=0.99, help_text='Dispersal percent (range: 0-1, default: 0.99)', max_digits=3, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='dispersal percent (fraction)')),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pops.session', verbose_name='session id')),
            ],
            options={
                'verbose_name': 'run collection',
                'verbose_name_plural': 'run collections',
            },
        ),
        migrations.AddField(
            model_name='run',
            name='run_collection',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pops.runcollection', verbose_name='run collection id'),
        ),
        migrations.CreateModel(
            name='PestTreatment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(help_text='What is the date for the pest location?', verbose_name='date')),
                ('treatment_polygon', django.contrib.gis.db.models.fields.PolygonField(help_text='What is the treatment polygon', srid=4326, verbose_name='treatment polygon')),
                ('pest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pops.pestinformation', verbose_name='pest')),
            ],
            options={
                'verbose_name': 'pest location',
                'verbose_name_plural': 'pest location',
            },
        ),
        migrations.CreateModel(
            name='PestLocation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(help_text='What is the date for the pest location?', verbose_name='date')),
                ('point', django.contrib.gis.db.models.fields.PointField(help_text="Point at which the pest was ID'd", srid=4326, verbose_name='pest location point')),
                ('latitude', models.DecimalField(decimal_places=6, help_text='latitude of pest location', max_digits=9, verbose_name='latitude of pest location')),
                ('longitude', models.DecimalField(decimal_places=6, help_text='longitude of pest location', max_digits=9, verbose_name='longitude of pest location')),
                ('count', models.PositiveIntegerField(blank=True, default=1, help_text='number of pests', verbose_name='number of pests')),
                ('pest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pops.pestinformation', verbose_name='pest')),
            ],
            options={
                'verbose_name': 'pest location',
                'verbose_name_plural': 'pest location',
            },
        ),
        migrations.AddField(
            model_name='pest',
            name='pest_information',
            field=models.ForeignKey(blank=True, help_text='Sample help text.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='pops.pestinformation', verbose_name='pest information'),
        ),
        migrations.AddField(
            model_name='output',
            name='pest',
            field=models.ForeignKey(blank=True, help_text='The pest associated with this pest, for cases with multiple pests', null=True, on_delete=django.db.models.deletion.SET_NULL, to='pops.pest', verbose_name='pest'),
        ),
        migrations.AddField(
            model_name='output',
            name='run',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pops.run', verbose_name='run id'),
        ),
        migrations.CreateModel(
            name='HostVectorTransmissionRate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.DecimalField(blank=True, decimal_places=0, max_digits=5, verbose_name='host to vector transmission rate value')),
                ('probability', models.DecimalField(blank=True, decimal_places=2, max_digits=5, verbose_name='host to vector transmission rate probability')),
                ('vector', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pops.vectorpestinformation', verbose_name='vector')),
            ],
            options={
                'verbose_name': 'host to vector transmission rate',
                'verbose_name_plural': 'host to vector transmission rates',
            },
        ),
        migrations.CreateModel(
            name='HostMovement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(help_text='What is the date for the map?', verbose_name='date')),
                ('number_of_units', models.PositiveIntegerField(blank=True, default=1, help_text='How many hosts moved?', verbose_name='number of hosts moved')),
                ('to_location', django.contrib.gis.db.models.fields.PointField(srid=4326)),
                ('from_location', django.contrib.gis.db.models.fields.PointField(srid=4326)),
                ('host_information', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pops.hostinformation', verbose_name='host')),
            ],
            options={
                'verbose_name': 'host location',
                'verbose_name_plural': 'host locations',
            },
        ),
        migrations.CreateModel(
            name='HostLocation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('host_map', models.FileField(blank=True, help_text='Host data (raster)', upload_to=pops.models.host_directory, verbose_name='host data')),
                ('meta_data', models.JSONField(help_text='Meta data for host map', verbose_name='meta data')),
                ('date', models.DateField(help_text='What is the date for the map?', verbose_name='date')),
                ('host_information', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pops.hostinformation', verbose_name='host')),
            ],
            options={
                'verbose_name': 'host location',
                'verbose_name_plural': 'host locations',
            },
        ),
        migrations.CreateModel(
            name='HistoricData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.PositiveIntegerField(blank=True, default=None, null=True, validators=[django.core.validators.MinValueValidator(2018)], verbose_name='historic data year')),
                ('data', models.JSONField(help_text='GeoJSON map data', null=True)),
                ('infected_area', models.DecimalField(blank=True, decimal_places=2, default=1, help_text='Overall infected area from the run.', max_digits=16, validators=[django.core.validators.MinValueValidator(0)], verbose_name='infected_area (m^2)')),
                ('number_infected', models.IntegerField(default=0, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='number_infected')),
                ('case_study', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pops.casestudy', verbose_name='case study id')),
            ],
            options={
                'verbose_name': 'historic data',
                'verbose_name_plural': 'historic datas',
            },
        ),
        migrations.CreateModel(
            name='ClippedHostMovement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(help_text='What is the date for the map?', verbose_name='date')),
                ('movement_file', models.FileField(blank=True, help_text='Host movement data clipped to Case Study size', upload_to=pops.models.clipped_host_movement_directory, verbose_name='host movement data')),
                ('pest_host_interaction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pops.pesthostinteraction', verbose_name='pest host interaction')),
            ],
            options={
                'verbose_name': 'clipped host movement',
                'verbose_name_plural': 'clipped host movement',
            },
        ),
        migrations.CreateModel(
            name='ClippedHostLocation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('host_map', models.FileField(blank=True, help_text='Clipped host data (raster)', upload_to=pops.models.clipped_host_directory, verbose_name='clipped host data')),
                ('date', models.DateField(help_text='What is the date for the map?', verbose_name='date')),
                ('pest_host_interaction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pops.pesthostinteraction', verbose_name='pest host interaction')),
            ],
            options={
                'verbose_name': 'host location',
                'verbose_name_plural': 'host locations',
            },
        ),
        migrations.CreateModel(
            name='AllowedUsers',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pops.session', verbose_name='session id')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='user id')),
            ],
            options={
                'verbose_name': 'allowed user',
                'verbose_name_plural': 'allowed users',
            },
        ),
        migrations.CreateModel(
            name='LethalTemperature',
            fields=[
                ('weather', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='pops.weather', verbose_name='weather')),
                ('lethal_type', models.CharField(choices=[('COLD', 'Cold'), ('HOT', 'Hot')], default='COLD', help_text='Is your pest killed by hot or cold temperatures?', max_length=4, verbose_name='lethal temperature type')),
                ('month', models.PositiveSmallIntegerField(choices=[(1, 'January'), (2, 'February'), (3, 'March'), (4, 'April'), (5, 'May'), (6, 'June'), (7, 'July'), (8, 'August'), (9, 'September'), (10, 'October'), (11, 'November'), (12, 'December')], default=1, help_text='What month does your lethal temperature occur?', verbose_name='month in which lethal temperature occurs')),
                ('value', models.DecimalField(blank=True, decimal_places=2, help_text='At what temperature does pest/pathogen mortality occur?', max_digits=4, validators=[django.core.validators.MinValueValidator(-50), django.core.validators.MaxValueValidator(50)], verbose_name='lethal temperature')),
                ('lethal_temperature_data', models.FileField(help_text='Upload your lethal temperature data as a raster file (1 file with a layer for each year).', null=True, upload_to=pops.models.lethal_temperature_directory, verbose_name='lethal temperature data')),
            ],
            options={
                'verbose_name': 'lethal temperature',
                'verbose_name_plural': 'lethal temperatures',
            },
        ),
        migrations.CreateModel(
            name='Precipitation',
            fields=[
                ('weather', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='pops.weather', verbose_name='weather')),
                ('method', models.CharField(choices=[('RECLASS', 'Reclass'), ('POLYNOMIAL', 'Polynomial')], default='RECLASS', help_text='Choose a method to transform precipitation into a coefficient used by the model. Precipitation values are transformed into a value between 0 and 1.', max_length=30, verbose_name='precipitation coefficient creation method')),
                ('precipitation_data', models.FileField(help_text='Upload your precipitation data as a raster file (1 file with a layer for each timestep).', null=True, upload_to=pops.models.precipitation_directory, verbose_name='precipitation data')),
            ],
            options={
                'verbose_name': 'precipitation',
                'verbose_name_plural': 'precipitations',
            },
        ),
        migrations.CreateModel(
            name='Seasonality',
            fields=[
                ('weather', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='pops.weather', verbose_name='weather')),
                ('first_month', models.PositiveSmallIntegerField(choices=[(1, 'January'), (2, 'February'), (3, 'March'), (4, 'April'), (5, 'May'), (6, 'June'), (7, 'July'), (8, 'August'), (9, 'September'), (10, 'October'), (11, 'November'), (12, 'December')], default=1, help_text='What month does the pest/pathogen first spread each year?', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)], verbose_name='first month of season')),
                ('last_month', models.PositiveSmallIntegerField(choices=[(1, 'January'), (2, 'February'), (3, 'March'), (4, 'April'), (5, 'May'), (6, 'June'), (7, 'July'), (8, 'August'), (9, 'September'), (10, 'October'), (11, 'November'), (12, 'December')], default=12, help_text='What month doest the pest/pathogen last spread each year?', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)], verbose_name='last month of season')),
            ],
            options={
                'verbose_name': 'seasonality',
                'verbose_name_plural': 'seasonalities',
            },
        ),
        migrations.CreateModel(
            name='Temperature',
            fields=[
                ('weather', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='pops.weather', verbose_name='weather')),
                ('method', models.CharField(choices=[('RECLASS', 'Reclass'), ('POLYNOMIAL', 'Polynomial')], default='RECLASS', help_text='Choose a method to transform temperature into a coefficient used by the model. Temperature values are transformed into a value between 0 and 1.', max_length=30, verbose_name='temperature coefficient creation method')),
                ('temperature_data', models.FileField(help_text='Upload your temperature data as a raster file (1 file with a layer for each timestep).', null=True, upload_to=pops.models.temperature_directory, verbose_name='temperature data')),
            ],
            options={
                'verbose_name': 'temperature',
                'verbose_name_plural': 'temperatures',
            },
        ),
        migrations.CreateModel(
            name='Wind',
            fields=[
                ('weather', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='pops.weather', verbose_name='weather')),
                ('wind_direction', models.CharField(choices=[('N', 'North'), ('NE', 'Northeast'), ('E', 'East'), ('SE', 'Southeast'), ('S', 'South'), ('SW', 'Southwest'), ('W', 'West'), ('NW', 'Northwest')], default='N', help_text='What is the predominate wind direction in your study area?', max_length=30, verbose_name='wind direction')),
                ('kappa', models.PositiveSmallIntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (6, '6'), (7, '7'), (8, '8'), (9, '9'), (10, '10'), (11, '11'), (12, '12')], default=1, help_text='What is the average wind strength in your study area? 0 is no effect and 12 is very strong directional movement', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)], verbose_name='wind strenth (kappa)')),
            ],
            options={
                'verbose_name': 'wind',
                'verbose_name_plural': 'winds',
            },
        ),
        migrations.CreateModel(
            name='QuarantineLink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pops.pest', verbose_name='pest')),
                ('quarantine', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pops.quarantine', verbose_name='quarantine')),
            ],
            options={
                'verbose_name': 'quarantine',
                'verbose_name_plural': 'quarantines',
            },
        ),
        migrations.CreateModel(
            name='MortalityTimeLag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.DecimalField(blank=True, decimal_places=0, max_digits=5, verbose_name='mortality time lag value')),
                ('probability', models.DecimalField(blank=True, decimal_places=2, max_digits=5, verbose_name='mortality time lag probability')),
                ('mortality', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pops.mortality', verbose_name='mortality')),
            ],
            options={
                'verbose_name': 'mortality time lag',
                'verbose_name_plural': 'mortality time lags',
            },
        ),
        migrations.CreateModel(
            name='MortalityRate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.DecimalField(blank=True, decimal_places=0, max_digits=5, verbose_name='mortality rate value')),
                ('probability', models.DecimalField(blank=True, decimal_places=2, max_digits=5, verbose_name='mortality rate probability')),
                ('mortality', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pops.mortality', verbose_name='mortality')),
            ],
            options={
                'verbose_name': 'mortality rate',
                'verbose_name_plural': 'mortality rates',
            },
        ),
        migrations.CreateModel(
            name='PrecipitationPolynomial',
            fields=[
                ('precipitation', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='pops.precipitation', verbose_name='precipitation')),
                ('degree', models.PositiveSmallIntegerField(choices=[(1, 'One'), (2, 'Two'), (3, 'Three')], default=1, help_text='Select the degree of your polynomial function.', verbose_name='polynomial degree')),
                ('a0', models.DecimalField(blank=True, decimal_places=5, help_text='value of a0 in your polynomial transformation.', max_digits=8, null=True, verbose_name='a0')),
                ('a1', models.DecimalField(blank=True, decimal_places=5, help_text='value of a1 in your polynomial transformation.', max_digits=8, null=True, verbose_name='a1')),
                ('a2', models.DecimalField(blank=True, decimal_places=5, help_text='value of a2 in your polynomial transformation.', max_digits=8, null=True, verbose_name='a2')),
                ('a3', models.DecimalField(blank=True, decimal_places=5, help_text='value of a3 in your polynomial transformation.', max_digits=8, null=True, verbose_name='a3')),
                ('x1', models.DecimalField(blank=True, decimal_places=2, help_text='value of x1 in your polynomial transformation.', max_digits=5, null=True, verbose_name='x1')),
                ('x2', models.DecimalField(blank=True, decimal_places=2, help_text='value of x2 in your polynomial transformation.', max_digits=5, null=True, verbose_name='x2')),
                ('x3', models.DecimalField(blank=True, decimal_places=2, help_text='value of x3 in your polynomial transformation.', max_digits=5, null=True, verbose_name='x3')),
            ],
            options={
                'verbose_name': 'precipitation polynomial',
                'verbose_name_plural': 'precipitation polynomials',
            },
        ),
        migrations.CreateModel(
            name='TemperaturePolynomial',
            fields=[
                ('temperature', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='pops.temperature', verbose_name='temperature')),
                ('degree', models.PositiveSmallIntegerField(choices=[(1, 'One'), (2, 'Two'), (3, 'Three')], default=1, help_text='Select the degree of your polynomial function.', verbose_name='polynomial degree')),
                ('a0', models.DecimalField(blank=True, decimal_places=5, help_text='value of a0 in your polynomial transformation.', max_digits=8, null=True, verbose_name='a0')),
                ('a1', models.DecimalField(blank=True, decimal_places=5, help_text='value of a1 in your polynomial transformation.', max_digits=8, null=True, verbose_name='a1')),
                ('a2', models.DecimalField(blank=True, decimal_places=5, help_text='value of a2 in your polynomial transformation.', max_digits=8, null=True, verbose_name='a2')),
                ('a3', models.DecimalField(blank=True, decimal_places=5, help_text='value of a3 in your polynomial transformation.', max_digits=8, null=True, verbose_name='a3')),
                ('x1', models.DecimalField(blank=True, decimal_places=2, help_text='value of x1 in your polynomial transformation.', max_digits=5, null=True, verbose_name='x1')),
                ('x2', models.DecimalField(blank=True, decimal_places=2, help_text='value of x2 in your polynomial transformation.', max_digits=5, null=True, verbose_name='x2')),
                ('x3', models.DecimalField(blank=True, decimal_places=2, help_text='value of x3 in your polynomial transformation.', max_digits=5, null=True, verbose_name='x3')),
            ],
            options={
                'verbose_name': 'temperature polynomial',
                'verbose_name_plural': 'temperature polynomials',
            },
        ),
        migrations.CreateModel(
            name='TemperatureReclass',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('min_value', models.DecimalField(blank=True, decimal_places=2, help_text='Minimum temperature (in degrees Celsius) to reclass from', max_digits=4, validators=[django.core.validators.MinValueValidator(-50), django.core.validators.MaxValueValidator(100)], verbose_name='min')),
                ('max_value', models.DecimalField(blank=True, decimal_places=2, help_text='Maximum temperature (in degrees Celsius) to reclass from', max_digits=4, validators=[django.core.validators.MinValueValidator(-50), django.core.validators.MaxValueValidator(100)], verbose_name='max')),
                ('reclass', models.DecimalField(blank=True, decimal_places=2, help_text='Reclass value (between 0 and 1)', max_digits=4, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='reclass')),
                ('temperature', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pops.temperature', verbose_name='temperature')),
            ],
            options={
                'verbose_name': 'temperature reclass',
                'verbose_name_plural': 'temperature reclasses',
                'ordering': ['min_value'],
            },
        ),
        migrations.CreateModel(
            name='PrecipitationReclass',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('min_value', models.DecimalField(blank=True, decimal_places=2, help_text='Minimum precipitation (in millimeters) to reclass from', max_digits=6, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='min')),
                ('max_value', models.DecimalField(blank=True, decimal_places=2, help_text='Maximum precipitation (in millimeters) to reclass from', max_digits=6, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='max')),
                ('reclass', models.DecimalField(blank=True, decimal_places=2, help_text='Reclass value (between 0 and 1)', max_digits=4, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='reclass')),
                ('precipitation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pops.precipitation', verbose_name='precipitation')),
            ],
            options={
                'verbose_name': 'precipitation reclass',
                'verbose_name_plural': 'precipitation reclasses',
                'ordering': ['min_value'],
            },
        ),
    ]
