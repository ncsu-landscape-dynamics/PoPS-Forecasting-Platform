# Generated by Django 3.1.4 on 2021-01-07 19:48

import datetime
import django.contrib.gis.db.models.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import pops.models


class Migration(migrations.Migration):

    dependencies = [
        ('pops', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='AllPopulationsData',
            fields=[
                ('case_study', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='pops.casestudy', verbose_name='case study')),
                ('user_file', models.FileField(blank=True, help_text='Upload your total population data as a raster file. This could be all the plants in a cell, or alternatively, all  cells could have the value of the maximum number of hosts found in any cell in your study area.', upload_to=pops.models.all_populations_directory, verbose_name='all plant data')),
            ],
            options={
                'verbose_name': 'all population',
                'verbose_name_plural': 'all population',
            },
        ),
        migrations.CreateModel(
            name='ClippedHostLocation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('host_map', models.FileField(blank=True, help_text='Clipped host data (raster)', upload_to=pops.models.clipped_host_directory, verbose_name='clipped host data')),
                ('date', models.DateField(default=datetime.date.today, help_text='What is the date for the map?', verbose_name='date')),
            ],
            options={
                'verbose_name': 'host location',
                'verbose_name_plural': 'host locations',
            },
        ),
        migrations.CreateModel(
            name='ClippedHostMovement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(default=datetime.date.today, help_text='What is the date for the map?', verbose_name='date')),
                ('movement_file', models.FileField(blank=True, help_text='Host movement data clipped to Case Study size', upload_to=pops.models.clipped_host_movement_directory, verbose_name='host movement data')),
            ],
            options={
                'verbose_name': 'clipped host movement',
                'verbose_name_plural': 'clipped host movement',
            },
        ),
        migrations.CreateModel(
            name='HostInformation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, help_text="What is the host's common name?", max_length=150, verbose_name='host common name')),
            ],
            options={
                'verbose_name': 'host',
                'verbose_name_plural': 'hosts',
            },
        ),
        migrations.CreateModel(
            name='HostLocation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('host_map', models.FileField(blank=True, help_text='Host data (raster)', upload_to=pops.models.host_directory, verbose_name='host data')),
                ('meta_data', models.JSONField(help_text='Meta data for host map', verbose_name='meta data')),
                ('date', models.DateField(default=datetime.date.today, help_text='What is the date for the map?', verbose_name='date')),
                ('host_information', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pops.hostinformation', verbose_name='host')),
            ],
            options={
                'verbose_name': 'host location',
                'verbose_name_plural': 'host locations',
            },
        ),
        migrations.CreateModel(
            name='HostMovement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(default=datetime.date.today, help_text='What is the date for the map?', verbose_name='date')),
                ('number_of_units', models.PositiveIntegerField(blank=True, default=1, help_text='How many hosts moved?', verbose_name='number of hosts moved')),
                ('to_location', django.contrib.gis.db.models.fields.PointField(srid=4326)),
                ('from_location', django.contrib.gis.db.models.fields.PointField(srid=4326)),
                ('host_information', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pops.hostinformation', verbose_name='host')),
            ],
            options={
                'verbose_name': 'host location',
                'verbose_name_plural': 'host locations',
            },
        ),
        migrations.CreateModel(
            name='Infestation',
            fields=[
                ('pest', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='pops.pest', verbose_name='pest')),
                ('user_file', models.FileField(blank=True, help_text='Infestation raster generated from Location', upload_to=pops.models.infestation_directory, verbose_name='infestation data')),
            ],
            options={
                'verbose_name': 'infestation_data',
                'verbose_name_plural': 'infestation_datas',
            },
        ),
        migrations.CreateModel(
            name='LatencyPeriod',
            fields=[
                ('pest', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='pops.pest', verbose_name='pest')),
                ('minimum', models.PositiveSmallIntegerField(blank=True, default=0, help_text='Minimum latency period (in days)', null=True, verbose_name='minimum days')),
                ('maximum', models.PositiveSmallIntegerField(blank=True, default=0, help_text='Maximum latency period (in days)', null=True, verbose_name='minimum days')),
            ],
            options={
                'verbose_name': 'latency period',
                'verbose_name_plural': 'latency period',
            },
        ),
        migrations.CreateModel(
            name='Parameters',
            fields=[
                ('pest', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='pops.pest', verbose_name='pest')),
                ('means', models.JSONField(blank=True, help_text='Parameter means...', verbose_name='vector of means')),
                ('covariance_matrix', models.JSONField(blank=True, help_text='Covariance matrix for parameters', verbose_name='covariance matrix')),
            ],
            options={
                'verbose_name': 'parameters',
                'verbose_name_plural': 'parameters',
            },
        ),
        migrations.CreateModel(
            name='PestHostInteraction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('competency', models.DecimalField(blank=True, decimal_places=2, default=1, help_text='Competency is a value between 0 and 1. 0 spreads no pest; 1 spreads maximum amount of pest. This is for generalist pests with differing host preferences and pathogens with differing host competencies.', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='competency')),
                ('susceptibility', models.DecimalField(blank=True, decimal_places=2, default=1, help_text='Susceptibility is a value between 0 and 1. 0 indicates the host can not be infected/infested; 1 indicates the host is maximally susceptibile.This is for generalist pests with differing host preferences and pathogens with differing host competencies.', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='susceptibility')),
                ('mortality_on', models.BooleanField(blank=True, help_text='Does the host experience mortality with this pest?', verbose_name='mortality')),
                ('host', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pops.hostinformation', verbose_name='host')),
            ],
            options={
                'verbose_name': 'pest host interaction',
                'verbose_name_plural': 'pest host interaction',
            },
        ),
        migrations.CreateModel(
            name='PestLocation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(default=datetime.date.today, help_text='What is the date for the pest location?', verbose_name='date')),
                ('point', django.contrib.gis.db.models.fields.PointField(help_text="Point at which the pest was ID'd", srid=4326, verbose_name='pest location point')),
                ('latitude', models.DecimalField(decimal_places=6, help_text='latitude of pest location', max_digits=9, verbose_name='latitude of pest location')),
                ('longitude', models.DecimalField(decimal_places=6, help_text='longitude of pest location', max_digits=9, verbose_name='longitude of pest location')),
                ('count', models.PositiveIntegerField(blank=True, default=1, help_text='number of pests', verbose_name='number of pests')),
            ],
            options={
                'verbose_name': 'pest location',
                'verbose_name_plural': 'pest location',
            },
        ),
        migrations.CreateModel(
            name='PestTreatment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(default=datetime.date.today, help_text='What is the date for the pest location?', verbose_name='date')),
                ('treatment_polygon', django.contrib.gis.db.models.fields.PolygonField(help_text='What is the treatment polygon', srid=4326, verbose_name='treatment polygon')),
            ],
            options={
                'verbose_name': 'pest location',
                'verbose_name_plural': 'pest location',
            },
        ),
        migrations.CreateModel(
            name='Quarantine',
            fields=[
                ('pest_information', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='pops.pestinformation', verbose_name='pest')),
                ('name', models.CharField(help_text='What is the name of the quarantine area?', max_length=150, verbose_name='quarantine name')),
                ('date', models.DateField(default=datetime.date.today, help_text='What is the date for the quarantine?', verbose_name='date')),
                ('polygon', django.contrib.gis.db.models.fields.PolygonField(help_text='Include the polygon for the quarantine area', srid=4326, verbose_name='quarantine polygon')),
            ],
            options={
                'verbose_name': 'quarantine',
                'verbose_name_plural': 'quarantines',
            },
        ),
        migrations.CreateModel(
            name='QuarantineLink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'verbose_name': 'quarantine',
                'verbose_name_plural': 'quarantines',
            },
        ),
        migrations.CreateModel(
            name='VectorPestInformation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'verbose_name': 'vector pest information',
                'verbose_name_plural': 'vector pest information',
            },
        ),
        migrations.RemoveField(
            model_name='anthropogenicdistance',
            name='pest',
        ),
        migrations.RemoveField(
            model_name='calibrationinfestation',
            name='pest',
        ),
        migrations.RemoveField(
            model_name='creation',
            name='host',
        ),
        migrations.RemoveField(
            model_name='cryptictoinfected',
            name='pest',
        ),
        migrations.RemoveField(
            model_name='host',
            name='case_study',
        ),
        migrations.RemoveField(
            model_name='hostdata',
            name='host',
        ),
        migrations.RemoveField(
            model_name='infectedtodiseased',
            name='pest',
        ),
        migrations.RemoveField(
            model_name='initialinfestation',
            name='pest',
        ),
        migrations.RemoveField(
            model_name='naturaldistance',
            name='pest',
        ),
        migrations.RemoveField(
            model_name='percentnaturaldistance',
            name='pest',
        ),
        migrations.RemoveField(
            model_name='priortreatmentyear',
            name='prior_treatment',
        ),
        migrations.RemoveField(
            model_name='reproductiverate',
            name='pest',
        ),
        migrations.RemoveField(
            model_name='validationinfestation',
            name='pest',
        ),
        migrations.RemoveField(
            model_name='vector',
            name='pest',
        ),
        migrations.RemoveField(
            model_name='vectornaturaldistance',
            name='vector',
        ),
        migrations.RemoveField(
            model_name='vectorreproductiverate',
            name='vector',
        ),
        migrations.RenameField(
            model_name='output',
            old_name='single_spread_map',
            new_name='max_spread_map',
        ),
        migrations.RemoveField(
            model_name='casestudy',
            name='end_year',
        ),
        migrations.RemoveField(
            model_name='casestudy',
            name='future_years',
        ),
        migrations.RemoveField(
            model_name='casestudy',
            name='model_api',
        ),
        migrations.RemoveField(
            model_name='casestudy',
            name='start_year',
        ),
        migrations.RemoveField(
            model_name='casestudy',
            name='time_step',
        ),
        migrations.RemoveField(
            model_name='pest',
            name='name',
        ),
        migrations.RemoveField(
            model_name='session',
            name='final_year',
        ),
        migrations.RemoveField(
            model_name='session',
            name='management_month',
        ),
        migrations.RemoveField(
            model_name='weather',
            name='case_study',
        ),
        migrations.AddField(
            model_name='casestudy',
            name='first_calibration_date',
            field=models.DateField(default=datetime.date.today, help_text='What is the first calibration date?', verbose_name='first calibration date'),
        ),
        migrations.AddField(
            model_name='casestudy',
            name='first_forecast_date',
            field=models.DateField(default=datetime.date.today, help_text='What is the first forecast date?', verbose_name='first forecast date'),
        ),
        migrations.AddField(
            model_name='casestudy',
            name='last_calibration_date',
            field=models.DateField(default=datetime.date.today, help_text='What is the last calibration date?', verbose_name='last calibration date'),
        ),
        migrations.AddField(
            model_name='casestudy',
            name='last_forecast_date',
            field=models.DateField(default=datetime.date.today, help_text='What is the last forecast date?', verbose_name='last forecast date'),
        ),
        migrations.AddField(
            model_name='casestudy',
            name='output_frequency_n',
            field=models.PositiveSmallIntegerField(blank=True, default=1, help_text="How many units is the desired output frequency? For example, if the output frequency unit is 'Day', select 3 here to make the output frequency 3 days.", validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(365)], verbose_name='output frequency n'),
        ),
        migrations.AddField(
            model_name='casestudy',
            name='output_frequency_unit',
            field=models.CharField(choices=[('month', 'Month'), ('week', 'Week'), ('day', 'Day')], default='Month', help_text='Select a output frequency unit for your simulation', max_length=50, verbose_name='output frequency'),
        ),
        migrations.AddField(
            model_name='casestudy',
            name='r_data',
            field=models.FileField(blank=True, help_text='R data file to run PoPS model', upload_to=pops.models.r_data_directory, verbose_name='R data file'),
        ),
        migrations.AddField(
            model_name='casestudy',
            name='start_exposed',
            field=models.BooleanField(default=False, help_text='Start the simulation with exposed hosts?', verbose_name='start the simulation with exposed hosts'),
        ),
        migrations.AddField(
            model_name='casestudy',
            name='time_step_n',
            field=models.PositiveSmallIntegerField(blank=True, default=1, help_text="How many units is the desired time step? For example, if the time step unit is 'Day', select 3 here to make the time step 3 days.", validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(365)], verbose_name='time step n'),
        ),
        migrations.AddField(
            model_name='casestudy',
            name='time_step_unit',
            field=models.CharField(choices=[('month', 'Month'), ('week', 'Week'), ('day', 'Day')], default='Month', help_text='Select a time step unit for your simulation:', max_length=50, verbose_name='time step'),
        ),
        migrations.AddField(
            model_name='casestudy',
            name='use_movements',
            field=models.BooleanField(default=False, help_text='Use host movement data?', verbose_name='use host movement'),
        ),
        migrations.AddField(
            model_name='casestudy',
            name='use_spread_rate',
            field=models.BooleanField(default=False, help_text='Use spread rate?', verbose_name='use spread rate'),
        ),
        migrations.AddField(
            model_name='output',
            name='median_spread_map',
            field=models.JSONField(null=True),
        ),
        migrations.AddField(
            model_name='output',
            name='min_spread_map',
            field=models.JSONField(null=True),
        ),
        migrations.AddField(
            model_name='output',
            name='pest',
            field=models.ForeignKey(blank=True, help_text='The pest associated with this pest, for cases with multiple pests', null=True, on_delete=django.db.models.deletion.SET_NULL, to='pops.pest', verbose_name='pest'),
        ),
        migrations.AddField(
            model_name='pest',
            name='use_quarantine',
            field=models.BooleanField(default=False, help_text='Does the pest have available quarantine zone(s)?', verbose_name='use quarantine'),
        ),
        migrations.AddField(
            model_name='priortreatment',
            name='date',
            field=models.DateField(blank=True, default=datetime.date.today, help_text='Date of treatment', null=True, verbose_name='date of treatment'),
        ),
        migrations.AddField(
            model_name='runcollection',
            name='deterministic_dispersal',
            field=models.BooleanField(default=False, help_text='Is dispersal deterministic?', verbose_name='deterministic dispersal'),
        ),
        migrations.AddField(
            model_name='runcollection',
            name='dispersal_percent',
            field=models.DecimalField(blank=True, decimal_places=2, default=0.99, help_text='Dispersal percent (range: 0-1, default: 0.99)', max_digits=3, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='dispersal percent (fraction)'),
        ),
        migrations.AddField(
            model_name='runcollection',
            name='establishment_probability',
            field=models.DecimalField(blank=True, decimal_places=2, default=0.5, help_text='Probability establishment (range: 0-1, default: 0.5)', max_digits=3, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='establishment probability (fraction)'),
        ),
        migrations.AddField(
            model_name='runcollection',
            name='establishment_stochasticity',
            field=models.BooleanField(default=True, help_text='Does establishment use stochastic processes?', verbose_name='establishment stochasticity'),
        ),
        migrations.AddField(
            model_name='runcollection',
            name='generate_stochasticity',
            field=models.BooleanField(default=True, help_text='Does reproduction use stochastic processes?', verbose_name='generate stochasticity'),
        ),
        migrations.AddField(
            model_name='runcollection',
            name='movement_stochasticity',
            field=models.BooleanField(default=True, help_text='Does host movement use stochastic processes?', verbose_name='movement stochasticity'),
        ),
        migrations.AddField(
            model_name='session',
            name='final_date',
            field=models.DateField(default=datetime.date.today, help_text='What is the last date to run simulations?', verbose_name='final date'),
        ),
        migrations.AddField(
            model_name='weather',
            name='pest',
            field=models.OneToOneField(default=1, on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='pops.pest', verbose_name='case study'),
        ),
        migrations.AlterField(
            model_name='anthropogenicdirection',
            name='direction',
            field=models.CharField(choices=[('N', 'North'), ('NE', 'Northeast'), ('E', 'East'), ('SE', 'Southeast'), ('S', 'South'), ('SW', 'Southwest'), ('W', 'West'), ('NW', 'Northwest')], default='N', help_text='What is the predominate anthropogenic direction?', max_length=30, verbose_name='anthropogenic direction'),
        ),
        migrations.AlterField(
            model_name='anthropogenicdirection',
            name='kappa',
            field=models.PositiveSmallIntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (6, '6'), (7, '7'), (8, '8'), (9, '9'), (10, '10'), (11, '11'), (12, '12')], default=1, help_text='What is the average anthropogenic strength in your study area? 0 is no effect and 12 is strong directional movement', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)], verbose_name='anthropogenic direction strenth (kappa)'),
        ),
        migrations.AlterField(
            model_name='casestudy',
            name='use_external_calibration',
            field=models.BooleanField(default=False, help_text="Is another case study's calibrated parameters used here?", verbose_name="use another case study's calibration"),
        ),
        migrations.AlterField(
            model_name='distancetoboundary',
            name='east_distance',
            field=models.DecimalField(blank=True, decimal_places=2, help_text='distance to boundary in easterly direction', max_digits=16, null=True, verbose_name='easterly distance to boundary'),
        ),
        migrations.AlterField(
            model_name='distancetoboundary',
            name='north_distance',
            field=models.DecimalField(blank=True, decimal_places=2, help_text='distance to boundary in northerly direction', max_digits=16, null=True, verbose_name='northerly distance to boundary'),
        ),
        migrations.AlterField(
            model_name='distancetoboundary',
            name='south_distance',
            field=models.DecimalField(blank=True, decimal_places=2, help_text='distance to boundary in southerly direction', max_digits=16, null=True, verbose_name='southerly distance to boundary'),
        ),
        migrations.AlterField(
            model_name='distancetoboundary',
            name='west_distance',
            field=models.DecimalField(blank=True, decimal_places=2, help_text='distance to boundary in westerly direction', max_digits=16, null=True, verbose_name='westerly distance to boundary'),
        ),
        migrations.AlterField(
            model_name='historicdata',
            name='data',
            field=models.JSONField(help_text='GeoJSON map data', null=True),
        ),
        migrations.AlterField(
            model_name='historicdata',
            name='year',
            field=models.PositiveIntegerField(blank=True, default=None, null=True, validators=[django.core.validators.MinValueValidator(2018)], verbose_name='historic data year'),
        ),
        migrations.AlterField(
            model_name='lethaltemperature',
            name='lethal_temperature_data',
            field=models.FileField(help_text='Upload your lethal temperature data as a raster file (1 file with a layer for each year).', null=True, upload_to=pops.models.lethal_temperature_directory, verbose_name='lethal temperature data'),
        ),
        migrations.AlterField(
            model_name='lethaltemperature',
            name='value',
            field=models.DecimalField(blank=True, decimal_places=2, help_text='At what temperature does pest/pathogen mortality occur?', max_digits=4, validators=[django.core.validators.MinValueValidator(-50), django.core.validators.MaxValueValidator(50)], verbose_name='lethal temperature'),
        ),
        migrations.AlterField(
            model_name='mapboxparameters',
            name='zoom',
            field=models.PositiveSmallIntegerField(blank=True, default=7, help_text='The zoom level of MapBox', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(16)], verbose_name='mapbox zoom level'),
        ),
        migrations.AlterField(
            model_name='mortality',
            name='method',
            field=models.CharField(choices=[('DATA_FILE', 'PoPS estimates mortality parameters from user data'), ('USER', 'User provides mortality rate and time lag')], default='DATA_FILE', help_text='Choose a method to determine mortality rate and time lag', max_length=30, verbose_name='mortality rate method'),
        ),
        migrations.AlterField(
            model_name='mortality',
            name='rate',
            field=models.DecimalField(blank=True, decimal_places=2, default=0, help_text='Annual percentage of hosts experiencing mortality?', max_digits=3, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='mortality rate (fraction)'),
        ),
        migrations.AlterField(
            model_name='mortality',
            name='time_lag',
            field=models.PositiveSmallIntegerField(blank=True, default=2, help_text='Years before mortality occurs on average?', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)], verbose_name='mortality time lag (years)'),
        ),
        migrations.AlterField(
            model_name='output',
            name='escape_probability',
            field=models.DecimalField(blank=True, decimal_places=2, default=1, help_text='Probability that the pest/pathogen escapes quarantine or other boundary', max_digits=6, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)], verbose_name='probability of escape'),
        ),
        migrations.AlterField(
            model_name='pestinformation',
            name='large_image',
            field=models.FileField(blank=True, help_text='Upload image of pest/pathogen (crop to 2in square at 72ppi)', null=True, upload_to='pest_images', verbose_name='Large image of pest/pathogen'),
        ),
        migrations.AlterField(
            model_name='pestinformation',
            name='spread_image',
            field=models.FileField(blank=True, help_text='Upload image or gif of pest/pathogen (at 72ppi)', null=True, upload_to='pest_images', verbose_name='Image or GIF of forecast'),
        ),
        migrations.AlterField(
            model_name='pestinformation',
            name='thumbnail',
            field=models.FileField(blank=True, help_text='Upload thumbnail image of pest/pathogen (58x58 px crop to 0.8in square at 72ppi)', null=True, upload_to='pest_images', verbose_name='Small thumbnail image of pest/pathogen'),
        ),
        migrations.AlterField(
            model_name='precipitationreclass',
            name='max_value',
            field=models.DecimalField(blank=True, decimal_places=2, help_text='Maximum precipitation (in millimeters) to reclass from', max_digits=6, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='max'),
        ),
        migrations.AlterField(
            model_name='precipitationreclass',
            name='min_value',
            field=models.DecimalField(blank=True, decimal_places=2, help_text='Minimum precipitation (in millimeters) to reclass from', max_digits=6, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='min'),
        ),
        migrations.AlterField(
            model_name='precipitationreclass',
            name='reclass',
            field=models.DecimalField(blank=True, decimal_places=2, help_text='Reclass value (between 0 and 1)', max_digits=4, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='reclass'),
        ),
        migrations.AlterField(
            model_name='priortreatment',
            name='user_file',
            field=models.FileField(blank=True, help_text='Upload the single raster file for management actions.', null=True, upload_to=pops.models.treatment_directory, verbose_name='prior treatments data'),
        ),
        migrations.AlterField(
            model_name='seasonality',
            name='first_month',
            field=models.PositiveSmallIntegerField(choices=[(1, 'January'), (2, 'February'), (3, 'March'), (4, 'April'), (5, 'May'), (6, 'June'), (7, 'July'), (8, 'August'), (9, 'September'), (10, 'October'), (11, 'November'), (12, 'December')], default=1, help_text='What month does the pest/pathogen first spread each year?', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)], verbose_name='first month of season'),
        ),
        migrations.AlterField(
            model_name='seasonality',
            name='last_month',
            field=models.PositiveSmallIntegerField(choices=[(1, 'January'), (2, 'February'), (3, 'March'), (4, 'April'), (5, 'May'), (6, 'June'), (7, 'July'), (8, 'August'), (9, 'September'), (10, 'October'), (11, 'November'), (12, 'December')], default=12, help_text='What month doest the pest/pathogen last spread each year?', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)], verbose_name='last month of season'),
        ),
        migrations.AlterField(
            model_name='session',
            name='default_run',
            field=models.OneToOneField(blank=True, help_text='Default no management run for this session.', null=True, on_delete=django.db.models.deletion.CASCADE, to='pops.run', verbose_name='default run'),
        ),
        migrations.AlterField(
            model_name='session',
            name='max_value',
            field=models.PositiveSmallIntegerField(blank=True, default=0, help_text='Maximum number of infected in a cell for final year', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='maximum value within a cell in default run'),
        ),
        migrations.AlterField(
            model_name='session',
            name='public',
            field=models.BooleanField(default=False, help_text='Public session? Any user can view and edit.', verbose_name='public session'),
        ),
        migrations.AlterField(
            model_name='temperaturereclass',
            name='max_value',
            field=models.DecimalField(blank=True, decimal_places=2, help_text='Maximum temperature (in degrees Celsius) to reclass from', max_digits=4, validators=[django.core.validators.MinValueValidator(-50), django.core.validators.MaxValueValidator(100)], verbose_name='max'),
        ),
        migrations.AlterField(
            model_name='temperaturereclass',
            name='min_value',
            field=models.DecimalField(blank=True, decimal_places=2, help_text='Minimum temperature (in degrees Celsius) to reclass from', max_digits=4, validators=[django.core.validators.MinValueValidator(-50), django.core.validators.MaxValueValidator(100)], verbose_name='min'),
        ),
        migrations.AlterField(
            model_name='temperaturereclass',
            name='reclass',
            field=models.DecimalField(blank=True, decimal_places=2, help_text='Reclass value (between 0 and 1)', max_digits=4, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='reclass'),
        ),
        migrations.AlterField(
            model_name='timetoboundary',
            name='east_time',
            field=models.DecimalField(blank=True, decimal_places=2, help_text='time to boundary in easterly direction', max_digits=16, null=True, verbose_name='easterly time to boundary'),
        ),
        migrations.AlterField(
            model_name='timetoboundary',
            name='north_time',
            field=models.DecimalField(blank=True, decimal_places=2, help_text='time to boundary in northerly direction', max_digits=16, null=True, verbose_name='northerly time to boundary'),
        ),
        migrations.AlterField(
            model_name='timetoboundary',
            name='south_time',
            field=models.DecimalField(blank=True, decimal_places=2, help_text='time to boundary in southerly direction', max_digits=16, null=True, verbose_name='southerly time to boundary'),
        ),
        migrations.AlterField(
            model_name='timetoboundary',
            name='west_time',
            field=models.DecimalField(blank=True, decimal_places=2, help_text='time to boundary in westerly direction', max_digits=16, null=True, verbose_name='westerly time to boundary'),
        ),
        migrations.AlterField(
            model_name='weather',
            name='wind_on',
            field=models.BooleanField(default=False, help_text='Does wind strongly affect spread and do you have a predominate wind direction and strength?', verbose_name='wind'),
        ),
        migrations.DeleteModel(
            name='AllPlantsData',
        ),
        migrations.DeleteModel(
            name='AnthropogenicDistance',
        ),
        migrations.DeleteModel(
            name='CalibrationInfestation',
        ),
        migrations.DeleteModel(
            name='Creation',
        ),
        migrations.DeleteModel(
            name='CrypticToInfected',
        ),
        migrations.DeleteModel(
            name='HostData',
        ),
        migrations.DeleteModel(
            name='InfectedToDiseased',
        ),
        migrations.DeleteModel(
            name='InitialInfestation',
        ),
        migrations.DeleteModel(
            name='NaturalDistance',
        ),
        migrations.DeleteModel(
            name='PercentNaturalDistance',
        ),
        migrations.DeleteModel(
            name='PriorTreatmentYear',
        ),
        migrations.DeleteModel(
            name='ReproductiveRate',
        ),
        migrations.DeleteModel(
            name='ValidationInfestation',
        ),
        migrations.DeleteModel(
            name='VectorNaturalDistance',
        ),
        migrations.DeleteModel(
            name='VectorReproductiveRate',
        ),
        migrations.AddField(
            model_name='vectorpestinformation',
            name='disease',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vectorborn_disease', to='pops.pest', verbose_name='vectorborn_disease'),
        ),
        migrations.AddField(
            model_name='vectorpestinformation',
            name='vector',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vector', to='pops.pest', verbose_name='vector'),
        ),
        migrations.AddField(
            model_name='quarantinelink',
            name='pest',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pops.pest', verbose_name='pest'),
        ),
        migrations.AddField(
            model_name='quarantinelink',
            name='quarantine',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pops.quarantine', verbose_name='quarantine'),
        ),
        migrations.AddField(
            model_name='pesttreatment',
            name='pest',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pops.pestinformation', verbose_name='pest'),
        ),
        migrations.AddField(
            model_name='pestlocation',
            name='pest',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pops.pestinformation', verbose_name='pest'),
        ),
        migrations.AddField(
            model_name='pesthostinteraction',
            name='pest',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pops.pest', verbose_name='pest'),
        ),
        migrations.AddField(
            model_name='clippedhostmovement',
            name='pest_host_interaction',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pops.pesthostinteraction', verbose_name='pest host interaction'),
        ),
        migrations.AddField(
            model_name='clippedhostlocation',
            name='pest_host_interaction',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pops.pesthostinteraction', verbose_name='pest host interaction'),
        ),
        migrations.AlterField(
            model_name='hostvectortransmissionrate',
            name='vector',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pops.vectorpestinformation', verbose_name='vector'),
        ),
        migrations.AlterField(
            model_name='mortality',
            name='host',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='pops.pesthostinteraction', verbose_name='PestHostInteraction'),
        ),
        migrations.AlterField(
            model_name='vectorhosttransmissionrate',
            name='vector',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pops.vectorpestinformation', verbose_name='vector'),
        ),
        migrations.DeleteModel(
            name='Host',
        ),
        migrations.DeleteModel(
            name='Vector',
        ),
    ]
