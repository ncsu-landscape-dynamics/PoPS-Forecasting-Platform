# Generated by Django 2.2.3 on 2019-08-06 17:49

import django.contrib.postgres.fields.jsonb
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import pops.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='CaseStudy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, help_text='Give your case study a descriptive name.', max_length=150, verbose_name='case study name')),
                ('description', models.TextField(blank=True, help_text='Give your case study a description.', max_length=300, null=True, verbose_name='case study description')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='date created')),
                ('number_of_pests', models.PositiveSmallIntegerField(blank=True, default=1, help_text='How many pests are in your model system?', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)], verbose_name='number of pests')),
                ('number_of_hosts', models.PositiveSmallIntegerField(blank=True, default=1, help_text='How many hosts are in your model system?', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)], verbose_name='number of hosts')),
                ('start_year', models.PositiveSmallIntegerField(blank=True, default=2012, help_text='The first year that you have pest occurence data for calibration.', validators=[django.core.validators.MinValueValidator(1900), django.core.validators.MaxValueValidator(2200)], verbose_name='first calibration year')),
                ('end_year', models.PositiveSmallIntegerField(blank=True, default=2018, help_text='The last year that you have pest occurence data for calibration.', validators=[django.core.validators.MinValueValidator(1900), django.core.validators.MaxValueValidator(2200)], verbose_name='final calibration year')),
                ('future_years', models.PositiveSmallIntegerField(blank=True, default=2023, help_text='The last year that you want to run the PoPS model (this is in the future).', validators=[django.core.validators.MinValueValidator(2018), django.core.validators.MaxValueValidator(2200)], verbose_name='final model year')),
                ('time_step', models.CharField(choices=[('month', 'Month'), ('week', 'Week'), ('day', 'Day')], default='Month', help_text='Select a time step for your simulation:', max_length=50, verbose_name='time step')),
                ('staff_approved', models.BooleanField(default=False, help_text='Sample help text.', verbose_name='approved by staff')),
                ('calibration_status', models.CharField(blank=True, choices=[('NO START', 'Not started'), ('IN PROGRESS', 'In progress'), ('FAILED', 'Failed'), ('SUCCESS', 'Successful'), ('EXTERNAL', 'Non-self')], default='NO START', help_text='What type of model do you want to use?', max_length=20, verbose_name='calibration status')),
                ('use_external_calibration', models.BooleanField(default=False, help_text='Sample help text.', verbose_name="use another case study's calibration?")),
            ],
            options={
                'verbose_name': 'case study',
                'verbose_name_plural': 'case studies',
            },
        ),
        migrations.CreateModel(
            name='Creation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'verbose_name': 'creation of host map',
                'verbose_name_plural': 'creation of host maps',
            },
        ),
        migrations.CreateModel(
            name='Host',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, help_text="What is the host's common name?", max_length=150, verbose_name='host common name')),
                ('score', models.DecimalField(blank=True, decimal_places=2, default=1, help_text='Host score is a value between 0 and 1. 0 has no effect while 1 has maximum effect. This is for generalist pests with differing host preferences and pathogens with differing host competencies.', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='score')),
                ('mortality_on', models.BooleanField(blank=True, help_text='Does the host experience mortality as a result of the pest/pathogen?', verbose_name='mortality')),
            ],
            options={
                'verbose_name': 'host',
                'verbose_name_plural': 'hosts',
            },
        ),
        migrations.CreateModel(
            name='Output',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='date created')),
                ('number_infected', models.IntegerField(default=0, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='number_infected')),
                ('infected_area', models.DecimalField(blank=True, decimal_places=2, default=1, help_text='Overall infected area from the run.', max_digits=16, validators=[django.core.validators.MinValueValidator(0)], verbose_name='infected_area (m^2)')),
                ('year', models.PositiveIntegerField(default=2020, null=True, validators=[django.core.validators.MinValueValidator(2018)], verbose_name='year')),
                ('single_spread_map', django.contrib.postgres.fields.jsonb.JSONField(null=True)),
                ('probability_map', django.contrib.postgres.fields.jsonb.JSONField(null=True)),
            ],
            options={
                'verbose_name': 'output',
                'verbose_name_plural': 'outputs',
            },
        ),
        migrations.CreateModel(
            name='Pest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, help_text='What is the common name of the pest/pathogen?', max_length=150, null=True, verbose_name='pest common name')),
                ('use_treatment', models.BooleanField(default=False, help_text='Has management occurred during the time of initial infection/infestation?', verbose_name='prior treatments')),
                ('vector_born', models.BooleanField(default=False, help_text='Is the disease spread by a vector (e.g. an insect)?', verbose_name='vector born')),
                ('model_type', models.CharField(blank=True, choices=[('SI', 'Susceptible Infected'), ('SID', 'Susceptible Infected Diseased'), ('SEID', 'Susceptible Exposed Infected Diseased')], default='SI', help_text='What type of model do you want to use?', max_length=20, verbose_name='model type')),
                ('dispersal_type', models.CharField(blank=True, choices=[('CAUCHY', 'Cauchy'), ('DOUBLE SCALE CAUCHY', 'Double Scale Cauchy'), ('EXPONENTIAL', 'Exponential'), ('DOUBLE SCALE EXPONENTIAL', 'Double Scale Exponential')], default='CAUCHY', max_length=70, verbose_name='dispersal type')),
            ],
            options={
                'verbose_name': 'pest',
                'verbose_name_plural': 'pests',
            },
        ),
        migrations.CreateModel(
            name='PestInformation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('common_name', models.CharField(max_length=150, verbose_name='pest common name')),
                ('scientific_name', models.CharField(help_text='Sample help text.', max_length=150, verbose_name='pest scientific name')),
                ('about', models.TextField(help_text='Sample help text.', verbose_name='about the pest')),
                ('risks', models.TextField(help_text='Sample help text.', verbose_name='risks associated with the pest')),
                ('management_activity', models.TextField(help_text='Sample help text.', verbose_name='management activities to control the pest')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='date created')),
                ('date_updated', models.DateTimeField(auto_now=True, verbose_name='date updated')),
                ('staff_approved', models.BooleanField(default=False, help_text='Sample help text.', verbose_name='approved by staff')),
            ],
            options={
                'verbose_name': 'pest information',
                'verbose_name_plural': 'pest informations',
            },
        ),
        migrations.CreateModel(
            name='PrecipitationReclass',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('min_value', models.DecimalField(blank=True, decimal_places=2, help_text='Minimum precipitation (in millimeters) to reclass from.', max_digits=6, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='min')),
                ('max_value', models.DecimalField(blank=True, decimal_places=2, help_text='Maximum precipitation (in millimeters) to reclass from.', max_digits=6, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='max')),
                ('reclass', models.DecimalField(blank=True, decimal_places=2, help_text='Reclass value (between 0 and 1).', max_digits=4, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='reclass')),
            ],
            options={
                'verbose_name': 'precipitation reclass',
                'verbose_name_plural': 'precipitation reclasses',
                'ordering': ['min_value'],
            },
        ),
        migrations.CreateModel(
            name='Run',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='date created')),
                ('status', models.CharField(blank=True, choices=[('PENDING', 'Pending'), ('IN PROGRESS', 'In progress'), ('READING DATA', 'Reading data'), ('WAITING FOR TL', 'Waiting for Tangible Landscape'), ('RUNNING MODEL', 'Running model'), ('WRITING DATA', 'Writing data'), ('FAILED', 'Failed'), ('SUCCESS', 'Successful')], default='PENDING', max_length=20, verbose_name='run status')),
                ('management_polygons', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('management_cost', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=16, null=True, verbose_name='management cost')),
                ('management_area', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=16, null=True, verbose_name='management area')),
                ('logging', models.TextField(blank=True, help_text='For checking error logs for backend model runs', max_length=300, null=True, verbose_name='error logs for backend')),
                ('time_taken', models.DecimalField(blank=True, decimal_places=1, max_digits=5, null=True, verbose_name='time taken')),
                ('steering_year', models.PositiveIntegerField(default=None, null=True, validators=[django.core.validators.MinValueValidator(2018)], verbose_name='steering year')),
            ],
            options={
                'verbose_name': 'run',
                'verbose_name_plural': 'runs',
            },
        ),
        migrations.CreateModel(
            name='RunCollection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=45, verbose_name='run name')),
                ('description', models.TextField(blank=True, default='Give your run a description.', help_text='Give your run a description.', max_length=300, null=True, verbose_name='run description')),
                ('random_seed', models.PositiveIntegerField(default=33, null=True, validators=[django.core.validators.MinValueValidator(1)], verbose_name='random seed')),
                ('tangible_landscape', models.BooleanField(default=False, help_text='Use tangible landscape for management?', verbose_name='tangible landscape')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='date created')),
                ('status', models.CharField(blank=True, choices=[('PENDING', 'Pending'), ('IN PROGRESS', 'In progress'), ('READING DATA', 'Reading data'), ('WAITING FOR TL', 'Waiting for Tangible Landscape'), ('RUNNING MODEL', 'Running model'), ('WRITING DATA', 'Writing data'), ('FAILED', 'Failed'), ('SUCCESS', 'Successful')], default='PENDING', max_length=20, verbose_name='run status')),
                ('budget', models.PositiveIntegerField(default=30000000, null=True, validators=[django.core.validators.MinValueValidator(1)], verbose_name='budget')),
                ('efficacy', models.PositiveSmallIntegerField(blank=True, default=100, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)], verbose_name='efficacy')),
                ('cost_per_meter_squared', models.DecimalField(blank=True, decimal_places=9, default=0, max_digits=14, null=True, verbose_name='cost per meter squared')),
            ],
            options={
                'verbose_name': 'run collection',
                'verbose_name_plural': 'run collections',
            },
        ),
        migrations.CreateModel(
            name='TemperatureReclass',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('min_value', models.DecimalField(blank=True, decimal_places=2, help_text='Minimum temperature (in degrees Celsius) to reclass from.', max_digits=4, validators=[django.core.validators.MinValueValidator(-50), django.core.validators.MaxValueValidator(100)], verbose_name='min')),
                ('max_value', models.DecimalField(blank=True, decimal_places=2, help_text='Maximum temperature (in degrees Celsius) to reclass from.', max_digits=4, validators=[django.core.validators.MinValueValidator(-50), django.core.validators.MaxValueValidator(100)], verbose_name='max')),
                ('reclass', models.DecimalField(blank=True, decimal_places=2, help_text='Reclass value (between 0 and 1).', max_digits=4, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='reclass')),
            ],
            options={
                'verbose_name': 'temperature reclass',
                'verbose_name_plural': 'temperature reclasses',
                'ordering': ['min_value'],
            },
        ),
        migrations.CreateModel(
            name='Treatment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(1900), django.core.validators.MaxValueValidator(2200)], verbose_name='treatment year')),
                ('treatment_file', models.FileField(max_length=200, upload_to='documents', verbose_name='treatment raster for that year')),
            ],
            options={
                'verbose_name': 'treatment',
                'verbose_name_plural': 'treatments',
            },
        ),
        migrations.CreateModel(
            name='AllPlantsData',
            fields=[
                ('case_study', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='pops.CaseStudy', verbose_name='case study')),
                ('user_file', models.FileField(blank=True, help_text='Upload your total plants data as a raster file. This could be all the plants in a cell or all cells could have the value of the maximum number of hosts foound in any cell in your study area.', upload_to=pops.models.all_plants_directory, verbose_name='all plant data')),
            ],
            options={
                'verbose_name': 'all_plant',
                'verbose_name_plural': 'all_plants',
            },
        ),
        migrations.CreateModel(
            name='CalibrationInfestation',
            fields=[
                ('pest', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='pops.Pest', verbose_name='pest')),
                ('user_file', models.FileField(blank=True, help_text='Upload your calibration infestation/infection data as a raster file (1 file with a layer for each year). At least 3 years are needed for calibration and validation ', upload_to=pops.models.validation_infestation_directory, verbose_name='calibration infestation data')),
            ],
            options={
                'verbose_name': 'calibration_infestation_data',
                'verbose_name_plural': 'calibration_infestation_datas',
            },
        ),
        migrations.CreateModel(
            name='CrypticToInfected',
            fields=[
                ('pest', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='pops.Pest', verbose_name='pest')),
                ('rate', models.DecimalField(decimal_places=2, max_digits=3, verbose_name='cryptic to infected rate')),
                ('rate_standard_deviation', models.DecimalField(decimal_places=2, max_digits=3, verbose_name='cryptic to infected standard deviation')),
            ],
            options={
                'verbose_name': 'cryptic to infected',
                'verbose_name_plural': 'cryptic to infecteds',
            },
        ),
        migrations.CreateModel(
            name='HostData',
            fields=[
                ('host', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='pops.Host', verbose_name='host')),
                ('user_file', models.FileField(blank=True, help_text='Upload your host data as a raster file.', upload_to=pops.models.host_directory, verbose_name='host data')),
            ],
            options={
                'verbose_name': 'host_data',
                'verbose_name_plural': 'hosts_data',
            },
        ),
        migrations.CreateModel(
            name='InfectedToDiseased',
            fields=[
                ('pest', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='pops.Pest', verbose_name='pest')),
                ('rate', models.DecimalField(decimal_places=2, max_digits=3, verbose_name='infected to diseased rate')),
                ('rate_standard_deviation', models.DecimalField(decimal_places=2, max_digits=3, verbose_name='infected to diseased standard deviation')),
            ],
            options={
                'verbose_name': 'infected to diseased',
                'verbose_name_plural': 'infected to diseaseds',
            },
        ),
        migrations.CreateModel(
            name='InitialInfestation',
            fields=[
                ('pest', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='pops.Pest', verbose_name='pest')),
                ('user_file', models.FileField(blank=True, help_text='Upload your initial infestation/infection data as a raster file (1 file with a layer for each year). At least 3 years are needed for calibration and validation ', upload_to=pops.models.initial_infestation_directory, verbose_name='initial infestation data')),
            ],
            options={
                'verbose_name': 'initial_infestation_data',
                'verbose_name_plural': 'initial_infestation_datas',
            },
        ),
        migrations.CreateModel(
            name='LongDistance',
            fields=[
                ('pest', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='pops.Pest', verbose_name='pest')),
                ('scale', models.DecimalField(decimal_places=1, max_digits=5, verbose_name='long distance scale')),
                ('scale_standard_deviation', models.DecimalField(decimal_places=1, max_digits=5, verbose_name='long distance scale standard deviation')),
            ],
            options={
                'verbose_name': 'long distance dispersal',
                'verbose_name_plural': 'long distance dispersals',
            },
        ),
        migrations.CreateModel(
            name='Mortality',
            fields=[
                ('host', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='pops.Host', verbose_name='host')),
                ('method', models.CharField(choices=[('DATA_FILE', 'PoPS estimates mortality rate and time lag from user data'), ('USER', 'User provides mortality rate and time lag')], default='DATA_FILE', help_text='Choose a method to determine mortality rate and time lag.', max_length=30, verbose_name='mortality rate method')),
                ('user_file', models.FileField(blank=True, help_text='A single raster file with number of trees that experienced mortality as a result of the pest/pathogen that year (each layer is a year)', null=True, upload_to=pops.models.mortality_directory, verbose_name='mortality data')),
                ('rate', models.DecimalField(blank=True, decimal_places=2, default=0, help_text='What percentage of hosts experience mortality each year from the pest or pathogen?', max_digits=3, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='mortality rate (fraction)')),
                ('rate_standard_deviation', models.DecimalField(blank=True, decimal_places=2, help_text='Sample help text.', max_digits=3, null=True, verbose_name='mortality rate standard deviation')),
                ('time_lag', models.PositiveSmallIntegerField(blank=True, default=2, help_text='How long after initial infection/infestation (in years) before mortality occurs on average?', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)], verbose_name='mortality time lag (years)')),
                ('time_lag_standard_deviation', models.DecimalField(blank=True, decimal_places=2, help_text='Sample help text.', max_digits=4, null=True, verbose_name='mortality time lag standard deviation')),
            ],
            options={
                'verbose_name': 'mortality',
                'verbose_name_plural': 'mortalities',
            },
        ),
        migrations.CreateModel(
            name='PriorTreatment',
            fields=[
                ('pest', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='pops.Pest', verbose_name='pest')),
                ('user_file', models.FileField(blank=True, help_text='Upload the raster file for management actions. 1 file with a layer for each year.', null=True, upload_to=pops.models.treatment_directory, verbose_name='prior treatments data')),
            ],
            options={
                'verbose_name': 'prior_treatment',
                'verbose_name_plural': 'prior_treatments',
            },
        ),
        migrations.CreateModel(
            name='ShortDistance',
            fields=[
                ('pest', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='pops.Pest', verbose_name='pest')),
                ('scale', models.DecimalField(decimal_places=1, max_digits=5, verbose_name='short distance scale')),
                ('scale_standard_deviation', models.DecimalField(decimal_places=1, max_digits=5, verbose_name='short distance scale standard deviation')),
                ('percent_short_distance', models.DecimalField(decimal_places=2, default=1, max_digits=3, verbose_name='percentage of dispersal that is short distance')),
            ],
            options={
                'verbose_name': 'short distance dispersal',
                'verbose_name_plural': 'short distance dispersals',
            },
        ),
        migrations.CreateModel(
            name='ValidationInfestation',
            fields=[
                ('pest', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='pops.Pest', verbose_name='pest')),
                ('user_file', models.FileField(blank=True, help_text='Upload your validation infestation/infection data as a raster file (1 file with a layer for each year). At least 3 years are needed for calibration and validation ', upload_to=pops.models.calibration_infestation_directory, verbose_name='validation infestation data')),
            ],
            options={
                'verbose_name': 'validation_infestation_data',
                'verbose_name_plural': 'validation_infestation_datas',
            },
        ),
        migrations.CreateModel(
            name='Vector',
            fields=[
                ('pest', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='pops.Pest', verbose_name='pest')),
                ('common_name', models.CharField(blank=True, help_text='What is the common name of the vector?', max_length=150, verbose_name='vector common name')),
                ('scientific_name', models.CharField(blank=True, help_text='What is the scientific name of the vector?', max_length=150, verbose_name='vector scientific name')),
                ('user_file', models.FileField(blank=True, help_text='Upload your vector data as a raster file.', null=True, upload_to=pops.models.vector_directory, verbose_name='vector data')),
                ('vector_to_host_transmission_rate', models.DecimalField(blank=True, decimal_places=2, help_text='Sample help text.', max_digits=3, null=True, verbose_name='vector to host transmission rate')),
                ('vector_to_host_transmission_rate_standard_deviation', models.DecimalField(blank=True, decimal_places=2, help_text='Sample help text.', max_digits=3, null=True, verbose_name='vector to host transmission rate standard deviation')),
                ('host_to_vector_transmission_rate', models.DecimalField(blank=True, decimal_places=2, help_text='Sample help text.', max_digits=3, null=True, verbose_name='host to vector transmission rate')),
                ('host_to_vector_transmission_rate_standard_deviation', models.DecimalField(blank=True, decimal_places=2, help_text='Sample help text.', max_digits=3, null=True, verbose_name='host to vector transmission rate standard deviation')),
            ],
            options={
                'verbose_name': 'vector',
                'verbose_name_plural': 'vectors',
            },
        ),
        migrations.CreateModel(
            name='Weather',
            fields=[
                ('case_study', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='pops.CaseStudy', verbose_name='case study')),
                ('wind_on', models.BooleanField(default=False, help_text='Does wind strongly affect the spread of your pest/pathogen and do you have a predominate wind direction and strength?', verbose_name='wind')),
                ('seasonality_on', models.BooleanField(default=False, help_text='Does your pest/pathogen not spread during part of the year?', verbose_name='seasonality')),
                ('lethal_temp_on', models.BooleanField(default=False, help_text='Does your pest/pathogen experience mortality due to extreme temperature conditions?', verbose_name='lethal temperature')),
                ('temp_on', models.BooleanField(default=False, help_text='Does temperature affect the reproduction and survival of your pest/pathogen?', verbose_name='temperature')),
                ('precipitation_on', models.BooleanField(default=False, help_text='Does precipitation affect the reproduction and survival of your pest/pathogen?', verbose_name='precipitation')),
            ],
            options={
                'verbose_name': 'weather',
                'verbose_name_plural': 'weathers',
            },
        ),
        migrations.CreateModel(
            name='Session',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='date created')),
                ('name', models.CharField(help_text='Give your session a descriptive name.', max_length=150, verbose_name='session name')),
                ('description', models.TextField(blank=True, help_text='Give your session a description.', max_length=300, null=True, verbose_name='session description')),
                ('reproductive_rate', models.DecimalField(blank=True, decimal_places=2, default=0, help_text='Reproductive rate of pest/pathogen', max_digits=6, null=True, verbose_name='reproductive rate')),
                ('distance_scale', models.DecimalField(decimal_places=1, max_digits=5, verbose_name='distance scale')),
                ('final_year', models.PositiveIntegerField(default=2021, null=True, validators=[django.core.validators.MinValueValidator(2018)], verbose_name='final run year')),
                ('management_month', models.PositiveSmallIntegerField(choices=[(1, 'January'), (2, 'February'), (3, 'March'), (4, 'April'), (5, 'May'), (6, 'June'), (7, 'July'), (8, 'August'), (9, 'September'), (10, 'October'), (11, 'November'), (12, 'December')], default=7, help_text='What month does management take place?', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)], verbose_name='month management takes place')),
                ('weather', models.CharField(blank=True, choices=[('BAD', 'Poor spread conditions'), ('AVERAGE', 'Average spread conditions'), ('GOOD', 'Optimal spread conditions')], default='AVERAGE', max_length=20, verbose_name='weather')),
                ('case_study', models.ForeignKey(help_text='Select a case study for this session.', on_delete=django.db.models.deletion.CASCADE, to='pops.CaseStudy', verbose_name='case study')),
            ],
            options={
                'verbose_name': 'session',
                'verbose_name_plural': 'sessions',
            },
        ),
    ]
